<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
        <linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
                <stop stop-color="#eeeeee" offset="5%" />
                <stop stop-color="#eeeeb0" offset="95%" />
        </linearGradient>
</defs>
<style type="text/css">
        text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
        #search, #ignorecase { opacity:0.1; cursor:pointer; }
        #search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
        #subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
        #title { text-anchor:middle; font-size:17px}
        #unzoom { cursor:pointer; }
        #frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
        .hide { display:none; }
        .parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
        "use strict";
        var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
        function init(evt) {
                details = document.getElementById("details").firstChild;
                searchbtn = document.getElementById("search");
                ignorecaseBtn = document.getElementById("ignorecase");
                unzoombtn = document.getElementById("unzoom");
                matchedtxt = document.getElementById("matched");
                svg = document.getElementsByTagName("svg")[0];
                searching = 0;
                currentSearchTerm = null;

                // use GET parameters to restore a flamegraphs state.
                var params = get_params();
                if (params.x && params.y)
                        zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
        }

        // event listeners
        window.addEventListener("click", function(e) {
                var target = find_group(e.target);
                if (target) {
                        if (target.nodeName == "a") {
                                if (e.ctrlKey === false) return;
                                e.preventDefault();
                        }
                        if (target.classList.contains("parent")) unzoom(true);
                        zoom(target);
                        if (!document.querySelector('.parent')) {
                                // we have basically done a clearzoom so clear the url
                                var params = get_params();
                                if (params.x) delete params.x;
                                if (params.y) delete params.y;
                                history.replaceState(null, null, parse_params(params));
                                unzoombtn.classList.add("hide");
                                return;
                        }

                        // set parameters for zoom state
                        var el = target.querySelector("rect");
                        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
                                var params = get_params()
                                params.x = el.attributes._orig_x.value;
                                params.y = el.attributes.y.value;
                                history.replaceState(null, null, parse_params(params));
                        }
                }
                else if (e.target.id == "unzoom") clearzoom();
                else if (e.target.id == "search") search_prompt();
                else if (e.target.id == "ignorecase") toggle_ignorecase();
        }, false)

        // mouse-over for info
        // show
        window.addEventListener("mouseover", function(e) {
                var target = find_group(e.target);
                if (target) details.nodeValue = "Function: " + g_to_text(target);
        }, false)

        // clear
        window.addEventListener("mouseout", function(e) {
                var target = find_group(e.target);
                if (target) details.nodeValue = ' ';
        }, false)

        // ctrl-F for search
        // ctrl-I to toggle case-sensitive search
        window.addEventListener("keydown",function (e) {
                if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
                        e.preventDefault();
                        search_prompt();
                }
                else if (e.ctrlKey && e.keyCode === 73) {
                        e.preventDefault();
                        toggle_ignorecase();
                }
        }, false)

        // functions
        function get_params() {
                var params = {};
                var paramsarr = window.location.search.substr(1).split('&');
                for (var i = 0; i < paramsarr.length; ++i) {
                        var tmp = paramsarr[i].split("=");
                        if (!tmp[0] || !tmp[1]) continue;
                        params[tmp[0]]  = decodeURIComponent(tmp[1]);
                }
                return params;
        }
        function parse_params(params) {
                var uri = "?";
                for (var key in params) {
                        uri += key + '=' + encodeURIComponent(params[key]) + '&';
                }
                if (uri.slice(-1) == "&")
                        uri = uri.substring(0, uri.length - 1);
                if (uri == '?')
                        uri = window.location.href.split('?')[0];
                return uri;
        }
        function find_child(node, selector) {
                var children = node.querySelectorAll(selector);
                if (children.length) return children[0];
        }
        function find_group(node) {
                var parent = node.parentElement;
                if (!parent) return;
                if (parent.id == "frames") return node;
                return find_group(parent);
        }
        function orig_save(e, attr, val) {
                if (e.attributes["_orig_" + attr] != undefined) return;
                if (e.attributes[attr] == undefined) return;
                if (val == undefined) val = e.attributes[attr].value;
                e.setAttribute("_orig_" + attr, val);
        }
        function orig_load(e, attr) {
                if (e.attributes["_orig_"+attr] == undefined) return;
                e.attributes[attr].value = e.attributes["_orig_" + attr].value;
                e.removeAttribute("_orig_"+attr);
        }
        function g_to_text(e) {
                var text = find_child(e, "title").firstChild.nodeValue;
                return (text)
        }
        function g_to_func(e) {
                var func = g_to_text(e);
                // if there's any manipulation we want to do to the function
                // name before it's searched, do it here before returning.
                return (func);
        }
        function update_text(e) {
                var r = find_child(e, "rect");
                var t = find_child(e, "text");
                var w = parseFloat(r.attributes.width.value) -3;
                var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
                t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

                // Smaller than this size won't fit anything
                if (w < 2 * 12 * 0.59) {
                        t.textContent = "";
                        return;
                }

                t.textContent = txt;
                var sl = t.getSubStringLength(0, txt.length);
                // check if only whitespace or if we can fit the entire string into width w
                if (/^ *$/.test(txt) || sl < w)
                        return;

                // this isn't perfect, but gives a good starting point
                // and avoids calling getSubStringLength too often
                var start = Math.floor((w/sl) * txt.length);
                for (var x = start; x > 0; x = x-2) {
                        if (t.getSubStringLength(0, x + 2) <= w) {
                                t.textContent = txt.substring(0, x) + "..";
                                return;
                        }
                }
                t.textContent = "";
        }

        // zoom
        function zoom_reset(e) {
                if (e.attributes != undefined) {
                        orig_load(e, "x");
                        orig_load(e, "width");
                }
                if (e.childNodes == undefined) return;
                for (var i = 0, c = e.childNodes; i < c.length; i++) {
                        zoom_reset(c[i]);
                }
        }
        function zoom_child(e, x, ratio) {
                if (e.attributes != undefined) {
                        if (e.attributes.x != undefined) {
                                orig_save(e, "x");
                                e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
                                if (e.tagName == "text")
                                        e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
                        }
                        if (e.attributes.width != undefined) {
                                orig_save(e, "width");
                                e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
                        }
                }

                if (e.childNodes == undefined) return;
                for (var i = 0, c = e.childNodes; i < c.length; i++) {
                        zoom_child(c[i], x - 10, ratio);
                }
        }
        function zoom_parent(e) {
                if (e.attributes) {
                        if (e.attributes.x != undefined) {
                                orig_save(e, "x");
                                e.attributes.x.value = 10;
                        }
                        if (e.attributes.width != undefined) {
                                orig_save(e, "width");
                                e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
                        }
                }
                if (e.childNodes == undefined) return;
                for (var i = 0, c = e.childNodes; i < c.length; i++) {
                        zoom_parent(c[i]);
                }
        }
        function zoom(node) {
                var attr = find_child(node, "rect").attributes;
                var width = parseFloat(attr.width.value);
                var xmin = parseFloat(attr.x.value);
                var xmax = parseFloat(xmin + width);
                var ymin = parseFloat(attr.y.value);
                var ratio = (svg.width.baseVal.value - 2 * 10) / width;

                // XXX: Workaround for JavaScript float issues (fix me)
                var fudge = 0.0001;

                unzoombtn.classList.remove("hide");

                var el = document.getElementById("frames").children;
                for (var i = 0; i < el.length; i++) {
                        var e = el[i];
                        var a = find_child(e, "rect").attributes;
                        var ex = parseFloat(a.x.value);
                        var ew = parseFloat(a.width.value);
                        var upstack;
                        // Is it an ancestor
                        if (0 == 0) {
                                upstack = parseFloat(a.y.value) > ymin;
                        } else {
                                upstack = parseFloat(a.y.value) < ymin;
                        }
                        if (upstack) {
                                // Direct ancestor
                                if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                                        e.classList.add("parent");
                                        zoom_parent(e);
                                        update_text(e);
                                }
                                // not in current path
                                else
                                        e.classList.add("hide");
                        }
                        // Children maybe
                        else {
                                // no common path
                                if (ex < xmin || ex + fudge >= xmax) {
                                        e.classList.add("hide");
                                }
                                else {
                                        zoom_child(e, xmin, ratio);
                                        update_text(e);
                                }
                        }
                }
                search();
        }
        function unzoom(dont_update_text) {
                unzoombtn.classList.add("hide");
                var el = document.getElementById("frames").children;
                for(var i = 0; i < el.length; i++) {
                        el[i].classList.remove("parent");
                        el[i].classList.remove("hide");
                        zoom_reset(el[i]);
                        if(!dont_update_text) update_text(el[i]);
                }
                search();
        }
        function clearzoom() {
                unzoom();

                // remove zoom state
                var params = get_params();
                if (params.x) delete params.x;
                if (params.y) delete params.y;
                history.replaceState(null, null, parse_params(params));
        }

        // search
        function toggle_ignorecase() {
                ignorecase = !ignorecase;
                if (ignorecase) {
                        ignorecaseBtn.classList.add("show");
                } else {
                        ignorecaseBtn.classList.remove("show");
                }
                reset_search();
                search();
        }
        function reset_search() {
                var el = document.querySelectorAll("#frames rect");
                for (var i = 0; i < el.length; i++) {
                        orig_load(el[i], "fill")
                }
                var params = get_params();
                delete params.s;
                history.replaceState(null, null, parse_params(params));
        }
        function search_prompt() {
                if (!searching) {
                        var term = prompt("Enter a search term (regexp " +
                            "allowed, eg: ^ext4_)"
                            + (ignorecase ? ", ignoring case" : "")
                            + "\nPress Ctrl-i to toggle case sensitivity", "");
                        if (term != null) search(term);
                } else {
                        reset_search();
                        searching = 0;
                        currentSearchTerm = null;
                        searchbtn.classList.remove("show");
                        searchbtn.firstChild.nodeValue = "Search"
                        matchedtxt.classList.add("hide");
                        matchedtxt.firstChild.nodeValue = ""
                }
        }
        function search(term) {
                if (term) currentSearchTerm = term;

                var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
                var el = document.getElementById("frames").children;
                var matches = new Object();
                var maxwidth = 0;
                for (var i = 0; i < el.length; i++) {
                        var e = el[i];
                        var func = g_to_func(e);
                        var rect = find_child(e, "rect");
                        if (func == null || rect == null)
                                continue;

                        // Save max width. Only works as we have a root frame
                        var w = parseFloat(rect.attributes.width.value);
                        if (w > maxwidth)
                                maxwidth = w;

                        if (func.match(re)) {
                                // highlight
                                var x = parseFloat(rect.attributes.x.value);
                                orig_save(rect, "fill");
                                rect.attributes.fill.value = "rgb(230,0,230)";

                                // remember matches
                                if (matches[x] == undefined) {
                                        matches[x] = w;
                                } else {
                                        if (w > matches[x]) {
                                                // overwrite with parent
                                                matches[x] = w;
                                        }
                                }
                                searching = 1;
                        }
                }
                if (!searching)
                        return;
                var params = get_params();
                params.s = currentSearchTerm;
                history.replaceState(null, null, parse_params(params));

                searchbtn.classList.add("show");
                searchbtn.firstChild.nodeValue = "Reset Search";

                // calculate percent matched, excluding vertical overlap
                var count = 0;
                var lastx = -1;
                var lastw = 0;
                var keys = Array();
                for (k in matches) {
                        if (matches.hasOwnProperty(k))
                                keys.push(k);
                }
                // sort the matched frames by their x location
                // ascending, then width descending
                keys.sort(function(a, b){
                        return a - b;
                });
                // Step through frames saving only the biggest bottom-up frames
                // thanks to the sort order. This relies on the tree property
                // where children are always smaller than their parents.
                var fudge = 0.0001;     // JavaScript floating point
                for (var k in keys) {
                        var x = parseFloat(keys[k]);
                        var w = matches[keys[k]];
                        if (x >= lastx + lastw - fudge) {
                                count += w;
                                lastx = x;
                                lastw = w;
                        }
                }
                // display matched percent
                matchedtxt.classList.remove("hide");
                var pct = 100 * count / maxwidth;
                if (pct != 100) pct = pct.toFixed(1)
                matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
        }
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>expf (109,187,270 samples, 0.12%)</title><rect x="1176.5" y="261" width="1.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1179.53" y="271.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (26,601,945 samples, 0.03%)</title><rect x="1174.2" y="181" width="0.4" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1177.22" y="191.5" ></text>
</g>
<g >
<title>ret_from_syscall (14,518,232 samples, 0.02%)</title><rect x="44.9" y="181" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="47.94" y="191.5" ></text>
</g>
<g >
<title>_IO_fflush (15,002,863 samples, 0.02%)</title><rect x="44.9" y="277" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="47.93" y="287.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (35,904,832 samples, 0.04%)</title><rect x="45.2" y="245" width="0.4" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.15" y="255.5" ></text>
</g>
<g >
<title>softmax (557,198,882 samples, 0.61%)</title><rect x="1178.0" y="261" width="7.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1181.03" y="271.5" ></text>
</g>
<g >
<title>__munmap (17,274,305 samples, 0.02%)</title><rect x="10.1" y="293" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.09" y="303.5" ></text>
</g>
<g >
<title>do_mas_munmap (16,795,423 samples, 0.02%)</title><rect x="10.1" y="229" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="13.10" y="239.5" ></text>
</g>
<g >
<title>unmap_region (16,795,423 samples, 0.02%)</title><rect x="10.1" y="197" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="13.10" y="207.5" ></text>
</g>
<g >
<title>change_prot_numa (18,369,954 samples, 0.02%)</title><rect x="1167.3" y="181" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1170.34" y="191.5" ></text>
</g>
<g >
<title>unmap_page_range (14,399,381 samples, 0.02%)</title><rect x="10.1" y="165" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.13" y="175.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (33,499,231 samples, 0.04%)</title><rect x="45.2" y="229" width="0.4" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.19" y="239.5" ></text>
</g>
<g >
<title>rmsnorm (15,932,895 samples, 0.02%)</title><rect x="1168.5" y="261" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1171.47" y="271.5" ></text>
</g>
<g >
<title>tty_write (13,066,439 samples, 0.01%)</title><rect x="45.0" y="117" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="47.95" y="127.5" ></text>
</g>
<g >
<title>build_tokenizer (15,979,965 samples, 0.02%)</title><rect x="10.4" y="293" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="13.36" y="303.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (10,558,610 samples, 0.01%)</title><rect x="45.5" y="85" width="0.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.48" y="95.5" ></text>
</g>
<g >
<title>softmax (309,789,903 samples, 0.34%)</title><rect x="1186.0" y="373" width="4.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1188.99" y="383.5" ></text>
</g>
<g >
<title>_IO_file_write@@GLIBC_2.27 (15,002,863 samples, 0.02%)</title><rect x="44.9" y="213" width="0.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="47.93" y="223.5" ></text>
</g>
<g >
<title>main (90,861,986,269 samples, 99.57%)</title><rect x="10.3" y="309" width="1174.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.33" y="319.5" >main</text>
</g>
<g >
<title>msort_with_tmp.part.0 (22,247,166 samples, 0.02%)</title><rect x="1174.3" y="165" width="0.3" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1177.28" y="175.5" ></text>
</g>
<g >
<title>filemap_map_pages (19,753,404 samples, 0.02%)</title><rect x="1167.8" y="181" width="0.2" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="1170.78" y="191.5" ></text>
</g>
<g >
<title>pty_write (8,714,654 samples, 0.01%)</title><rect x="45.0" y="69" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="47.99" y="79.5" ></text>
</g>
<g >
<title>vfs_write (14,518,232 samples, 0.02%)</title><rect x="44.9" y="133" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="47.94" y="143.5" ></text>
</g>
<g >
<title>forward (86,912,735,270 samples, 95.24%)</title><rect x="45.7" y="277" width="1123.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="48.67" y="287.5" >forward</text>
</g>
<g >
<title>_IO_file_sync@@GLIBC_2.27 (15,002,863 samples, 0.02%)</title><rect x="44.9" y="261" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="47.93" y="271.5" ></text>
</g>
<g >
<title>[unknown] (90,924,503,277 samples, 99.64%)</title><rect x="10.0" y="373" width="1175.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >[unknown]</text>
</g>
<g >
<title>handle_mm_fault (40,020,887 samples, 0.04%)</title><rect x="1167.6" y="213" width="0.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1170.64" y="223.5" ></text>
</g>
<g >
<title>rmsnorm (37,662,230 samples, 0.04%)</title><rect x="1169.5" y="261" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1172.54" y="271.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (33,380,354 samples, 0.04%)</title><rect x="1174.1" y="213" width="0.5" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1177.14" y="223.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (11,121,689 samples, 0.01%)</title><rect x="1174.4" y="133" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1177.42" y="143.5" ></text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (90,886,265,606 samples, 99.60%)</title><rect x="10.0" y="341" width="1175.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="13.01" y="351.5" >__libc_start_main@@GLIBC_2.34</text>
</g>
<g >
<title>matmul (86,758,312,674 samples, 95.07%)</title><rect x="46.3" y="261" width="1121.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="49.35" y="271.5" >matmul</text>
</g>
<g >
<title>encode (40,186,986 samples, 0.04%)</title><rect x="45.2" y="277" width="0.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="48.15" y="287.5" ></text>
</g>
<g >
<title>softmax (149,146,567 samples, 0.16%)</title><rect x="1174.6" y="261" width="1.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1177.59" y="271.5" ></text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (8,229,932 samples, 0.01%)</title><rect x="45.0" y="53" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="47.99" y="63.5" ></text>
</g>
<g >
<title>all (91,255,664,844 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>strcmp (9,582,513 samples, 0.01%)</title><rect x="1185.8" y="357" width="0.1" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1188.78" y="367.5" ></text>
</g>
<g >
<title>new_do_write (15,002,863 samples, 0.02%)</title><rect x="44.9" y="229" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="47.93" y="239.5" ></text>
</g>
<g >
<title>generate (88,185,637,276 samples, 96.64%)</title><rect x="44.9" y="293" width="1140.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="47.93" y="303.5" >generate</text>
</g>
<g >
<title>msort_with_tmp.part.0 (29,990,230 samples, 0.03%)</title><rect x="1174.2" y="197" width="0.4" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1177.18" y="207.5" ></text>
</g>
<g >
<title>__GI___qsort_r (35,904,832 samples, 0.04%)</title><rect x="45.2" y="261" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="48.15" y="271.5" ></text>
</g>
<g >
<title>forward (2,646,755,357 samples, 2.90%)</title><rect x="10.6" y="293" width="34.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.61" y="303.5" >fo..</text>
</g>
<g >
<title>_IO_do_write@@GLIBC_2.27 (15,002,863 samples, 0.02%)</title><rect x="44.9" y="245" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="47.93" y="255.5" ></text>
</g>
<g >
<title>free_transformer (17,274,305 samples, 0.02%)</title><rect x="10.1" y="309" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.09" y="319.5" ></text>
</g>
<g >
<title>run (91,255,651,818 samples, 100.00%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >run</text>
</g>
<g >
<title>file_tty_write.isra.0 (13,066,439 samples, 0.01%)</title><rect x="45.0" y="101" width="0.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="47.95" y="111.5" ></text>
</g>
<g >
<title>resume_userspace_slow (19,820,412 samples, 0.02%)</title><rect x="1167.3" y="245" width="0.3" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1170.33" y="255.5" ></text>
</g>
<g >
<title>do_mas_align_munmap (16,795,423 samples, 0.02%)</title><rect x="10.1" y="213" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.10" y="223.5" ></text>
</g>
<g >
<title>do_page_fault (44,359,971 samples, 0.05%)</title><rect x="1167.6" y="229" width="0.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1170.58" y="239.5" ></text>
</g>
<g >
<title>sys_write (14,518,232 samples, 0.02%)</title><rect x="44.9" y="165" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="47.94" y="175.5" ></text>
</g>
<g >
<title>queue_work_on (8,229,932 samples, 0.01%)</title><rect x="45.0" y="37" width="0.1" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="47.99" y="47.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (30,129,336 samples, 0.03%)</title><rect x="45.2" y="213" width="0.4" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.23" y="223.5" ></text>
</g>
<g >
<title>sample (498,680,036 samples, 0.55%)</title><rect x="1170.1" y="277" width="6.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1173.07" y="287.5" ></text>
</g>
<g >
<title>sqrtf32 (37,614,202 samples, 0.04%)</title><rect x="1169.0" y="261" width="0.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1172.03" y="271.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (14,369,981 samples, 0.02%)</title><rect x="45.4" y="117" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.43" y="127.5" ></text>
</g>
<g >
<title>sample_topp (187,252,635 samples, 0.21%)</title><rect x="1172.2" y="261" width="2.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1175.17" y="271.5" ></text>
</g>
<g >
<title>ret_from_exception (45,321,090 samples, 0.05%)</title><rect x="1167.6" y="245" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1170.58" y="255.5" ></text>
</g>
<g >
<title>__GI___qsort_r (35,800,840 samples, 0.04%)</title><rect x="1174.1" y="245" width="0.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1177.10" y="255.5" ></text>
</g>
<g >
<title>__vm_munmap (16,795,423 samples, 0.02%)</title><rect x="10.1" y="245" width="0.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="13.10" y="255.5" ></text>
</g>
<g >
<title>ksys_write (14,518,232 samples, 0.02%)</title><rect x="44.9" y="149" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="47.94" y="159.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (9,122,955 samples, 0.01%)</title><rect x="45.5" y="69" width="0.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.50" y="79.5" ></text>
</g>
<g >
<title>task_numa_work (18,853,544 samples, 0.02%)</title><rect x="1167.3" y="197" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1170.34" y="207.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (15,475,166 samples, 0.02%)</title><rect x="1174.4" y="149" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1177.37" y="159.5" ></text>
</g>
<g >
<title>softmax (36,677,164 samples, 0.04%)</title><rect x="1185.2" y="357" width="0.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1188.24" y="367.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (24,847,327 samples, 0.03%)</title><rect x="45.3" y="181" width="0.3" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.30" y="191.5" ></text>
</g>
<g >
<title>_IO_fread (9,595,171 samples, 0.01%)</title><rect x="10.4" y="277" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="13.39" y="287.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (26,773,302 samples, 0.03%)</title><rect x="45.3" y="197" width="0.3" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.27" y="207.5" ></text>
</g>
<g >
<title>do_work_pending (19,820,412 samples, 0.02%)</title><rect x="1167.3" y="229" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1170.33" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_write (15,002,863 samples, 0.02%)</title><rect x="44.9" y="197" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="47.93" y="207.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (21,979,108 samples, 0.02%)</title><rect x="45.3" y="165" width="0.3" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.33" y="175.5" ></text>
</g>
<g >
<title>ret_from_syscall (16,795,423 samples, 0.02%)</title><rect x="10.1" y="277" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="13.10" y="287.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (35,800,840 samples, 0.04%)</title><rect x="1174.1" y="229" width="0.5" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1177.10" y="239.5" ></text>
</g>
<g >
<title>change_protection (17,402,864 samples, 0.02%)</title><rect x="1167.3" y="165" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1170.34" y="175.5" ></text>
</g>
<g >
<title>_start (90,886,265,606 samples, 99.60%)</title><rect x="10.0" y="357" width="1175.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.01" y="367.5" >_start</text>
</g>
<g >
<title>expf (309,789,903 samples, 0.34%)</title><rect x="1186.0" y="357" width="4.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1188.99" y="367.5" ></text>
</g>
<g >
<title>forward (2,606,247,135 samples, 2.86%)</title><rect x="10.8" y="277" width="33.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.80" y="287.5" >fo..</text>
</g>
<g >
<title>msort_with_tmp.part.0 (12,004,370 samples, 0.01%)</title><rect x="45.5" y="101" width="0.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.46" y="111.5" ></text>
</g>
<g >
<title>softmax (22,194,268 samples, 0.02%)</title><rect x="1168.7" y="261" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1171.74" y="271.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (17,211,036 samples, 0.02%)</title><rect x="45.4" y="133" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.40" y="143.5" ></text>
</g>
<g >
<title>n_tty_write (9,681,785 samples, 0.01%)</title><rect x="45.0" y="85" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="47.97" y="95.5" ></text>
</g>
<g >
<title>task_work_run (18,853,544 samples, 0.02%)</title><rect x="1167.3" y="213" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1170.34" y="223.5" ></text>
</g>
<g >
<title>expf (36,677,164 samples, 0.04%)</title><rect x="1185.2" y="341" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1188.24" y="351.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (19,601,300 samples, 0.02%)</title><rect x="45.4" y="149" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="48.36" y="159.5" ></text>
</g>
<g >
<title>$x (90,886,265,606 samples, 99.60%)</title><rect x="10.0" y="325" width="1175.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="13.01" y="335.5" >$x</text>
</g>
<g >
<title>powf (18,813,282 samples, 0.02%)</title><rect x="1168.2" y="261" width="0.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1171.23" y="271.5" ></text>
</g>
<g >
<title>softmax (673,148,094 samples, 0.74%)</title><rect x="1176.5" y="277" width="8.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1179.53" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (34,232,884 samples, 0.04%)</title><rect x="1167.7" y="197" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1170.68" y="207.5" ></text>
</g>
<g >
<title>expf (44,899,922 samples, 0.05%)</title><rect x="45.8" y="261" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="48.77" y="271.5" ></text>
</g>
<g >
<title>unmap_vmas (15,357,167 samples, 0.02%)</title><rect x="10.1" y="181" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="13.12" y="191.5" ></text>
</g>
<g >
<title>sys_munmap (16,795,423 samples, 0.02%)</title><rect x="10.1" y="261" width="0.2" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="13.10" y="271.5" ></text>
</g>
<g >
<title>compare_tokens (9,582,513 samples, 0.01%)</title><rect x="1185.8" y="373" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1188.78" y="383.5" ></text>
</g>
<g >
<title>rmsnorm (40,076,996 samples, 0.04%)</title><rect x="1169.5" y="277" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1172.52" y="287.5" ></text>
</g>
<g >
<title>next_uptodate_page (9,636,489 samples, 0.01%)</title><rect x="1167.9" y="165" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1170.91" y="175.5" ></text>
</g>
<g >
<title>expf (8,206,865 samples, 0.01%)</title><rect x="10.7" y="277" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.69" y="287.5" ></text>
</g>
<g >
<title>sqrtf32 (12,519,178 samples, 0.01%)</title><rect x="44.6" y="277" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="47.63" y="287.5" ></text>
</g>
</g>
</svg>